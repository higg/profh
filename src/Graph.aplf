{ctl}←Graph w;arg;cfg;del;file;ix;md;p;tfn;tie;ct;b

    cfg←Config.Curr                     ⍝ Alias effective configuration
    w←{⍵≢⍬:⍵ ⋄ 1 2 3 5⎕PROFILE'tree'}w  ⍝ Fetch profile results, unless provided

    :If 0=≢⊃w                           ⍝ Abort if no profile data available
        out 'ERROR: No profile data!'
        :Return
    :EndIf

    ⍝
    ⍝ Convert data to call tree matrix with columns as follows:
    ⍝   [1] depth level
    ⍝   [2] function name
    ⍝   [3] function line number -- note that whole-function entries are ¯1, not ⍬
    ⍝   [4] exclusive accumulated time (ms)
    ⍝
    ct←⍉↑w                              ⍝ Convert to call tree matrix

    ⍝
    ⍝ Apply call tree pruning heuristics.
    ⍝
    ⍝ Reasons why pruning the call tree may be advantageious include:
    ⍝   - Focusing on areas of particular interest to the user.
    ⍝   - Reducing the size of the export file. Speedscope has been observed
    ⍝     to fail on files larger than ~500MB, and since the function names of
    ⍝     the entire stack are repeated for every leaf node entry (and we're
    ⍝     doing line-level!), eliminating uninteresting areas of the tree (e.g. a
    ⍝     common root) can have a huge impact.
    ⍝   - Eliminating any contributions from this tool apparent when profiling
    ⍝     was initiated under our aegis.
    ⍝
    ct←Profile.trimSelf ct              ⍝ Remove the impact of this tool

    :If ×≢tfn←cfg.topFn                 ⍝ If function-level pruning requested...
        tfn←'#.',⍣(⌊/'#⎕'≠⊃tfn)⊢tfn     ⍝ Assume root NS if not explicit
        out 'Isolating ',tfn
        ix←tfn Profile.find ct          ⍝ (I)nde(x) of function's first occurence
        b←ix<≢ct                        ⍝ Flag if found
        out (~b)/'Warning: Function ',tfn,' not found in call tree. Pruning aborted.'
        ct←ix Profile.subtree⍣b⊢ct      ⍝ Prune if found
    :ElseIf ~cfg.keepCtx
        ⍝
        ⍝ If no explicit pruning point was requested, we will attempt to remove
        ⍝ any entries that were on the stack when profiling started (unless
        ⍝ disabled). The heuristic used to identify those is an own-elapsed time
        ⍝ of zero at the very root of the call tree.
        ⍝
        ix←1++/∧\0=ct[;4]               ⍝ (I)nde(x) of first entry with non-zero elaspsed time
        b←ix>1                          ⍝ Flag if any pruning to be done
        out b/'Focusing under ',ct[ix;2]
        ct←ix Profile.subtree⍣b⊢ct      ⍝ Prune if needed
    :EndIf

    ct←Profile.removeHeaders ct         ⍝ Remove whole-function header entries
    ct[;2]←cfg.trimPfx trimPfx ct[;2]   ⍝ Trim function names (e.g. remove root namespace)

    ⍝
    ⍝ Delete previous temporary export files, unless directed otherwise.
    ⍝
    del←~cfg.keepTemp                   ⍝ Decide if deleting
    3 ⎕MKDIR TEMP_DIR                   ⍝ Create temporary directory, if needed
    p←⊃⎕NINFO ⎕OPT 1⊢TEMP_DIR,'/ss_*.js' ⍝ Identify previous export files

    out ('Retaining ' 'Deleting '⊃⍨1+del),(⍕≢p),' previous export file',ps≢p

    {}3 ⎕NDELETE⍣del⊢p                  ⍝ Delete previous files, if so configured; suppress output

    ⍝
    ⍝ Create temporary export file.
    ⍝
    3 ⎕MKDIR TEMP_DIR                   ⍝ Create temporary directory, if needed
    file←TEMP_DIR,'/ss_.js'             ⍝ Determine temporary file location and rootname
    tie←file ⎕NCREATE ⎕OPT'Unique'1 ⊢0  ⍝ Create file, appending random chars to filename
    file←⊃0 ⎕NINFO tie                  ⍝ Pick up randomized filename
    ⎕NUNTIE tie

    file SpeedScope ↓⍉ct                ⍝ Perform export

    ⍝
    ⍝ Launch speedscope in browser.
    ⍝
    arg←'file:///',cfg.libDir,'/speedscope/index.html#localProfilePath=',file
    Browser.browse arg
