:Namespace Profile

    clear←{                             ⍝ Clears ⎕PROFILE's buffer (ignores argument)
        _←##.out 'Clearing previous ⎕PROFILE buffer contents'
        ⎕PROFILE 'clear'
    }


    ∇ r ← isClear                       ⍝ Determines if ⎕PROFILE's buffer is clear
        r←~×≢⊃2⌷⎕PROFILE 'state'
    ∇


    ⍝
    ⍝ Profiles execution of one or more expressions (strings), optionally
    ⍝ clearing ⎕PROFILE's data buffer first.
    ⍝
    ⍝ Left argument is a vector of booleans as follows:
    ⍝   [1] indicates if previous ⎕PROFILE data should be cleared
    ⍝   [2] indicates if profiling should use CPU timer, otherwise uses elapsed time
    ⍝
    ∇ flags prof expr ;t
        clear⍣(isClear<×⊃flags)⊢⍬       ⍝ Clear buffer if requested and required
        t←⊃'elapsed' 'cpu'⌷⍨1+2⌷flags   ⍝ Determine profiling type
        ⎕PROFILE 'start' t              ⍝ Start profiling
        {}_eval↓↑expr                   ⍝ Evaluate expression(s), suppress results
        ⎕PROFILE 'stop'                 ⍝ Stop profiling
    ∇

    ⍝
    ⍝ Evaluates each of given list of expressions.
    ⍝
    ⍝ This function exists primarily to provide an obvious entry in the call
    ⍝ tree which can be isolated and pruned. DO NOT CHANGE ITS NAME!
    ⍝
    _eval←{⍎¨⍵}


    ⍝
    ⍝ Determines the trim point in given profile data set (⍵) in relation to
    ⍝ a given function name (⍺).
    ⍝
    ⍝ By default, the trim point sits before the first occurrence of ⍺ in ⍵. But
    ⍝ if ⍺ is provided as a pair whose second value is 1, the trim point occurrs
    ⍝ after the first occurrence of ⍵ on the stack. In summary:
    ⍝
    ⍝   (⍺≡ "fn")∨(⍺≡"fn" 0) → fn is retained after trimming 
    ⍝              ⍺≡"fn" 1  → fn is purged after trimming
    ⍝
    ⍝ ⍵ is expected to be a list of columns consistent with the results of
    ⍝ 1 2 3 5⎕PROFILE'tree'.
    ⍝
    ⍝ The result is the number of records to drop from ⍵.
    ⍝
    findTrim←{
        fn pur←2↑⍺,0                    ⍝ Split input, applying default

        h←(⊂fn)≡¨2⊃⍵                    ⍝ Hit vector for function of interest
        p←2↑⍸2≠/0,h                     ⍝ Pair first hit and subsequent miss, else 0's
        0⌈¯1+p⊃⍨1+pur                   ⍝ Pick appropriate cut point, if any
    }


    applyTrim←{
        ⍝//! guard early exit for performance
        r←⍺↓¨⍵                          ⍝ Do the drop
        d←⊃⍴                            ⍝ Depths
        d-←⊃d←⊃r                        ⍝ Shift depths to new start point
 
        ⍝ Adjust the depth
    }


    ⍝ April 2023 ⍝ //!

    ⍝ treesUnder tool entry point
    ⍝ subtree of configured function of focus
    ⍝ treesUnder initial-zero sequence

    ⍝
    ⍝ --- Tree-pruning helpers -------------------------------------------------
    ⍝

    ⍝
    ⍝ Prunes given call tree to include only entries strictly invoked under the
    ⍝ _eval function of this tool.
    ⍝
    trimSelf←{
        i←⍵ find⍨'._eval',⍨⍕⎕THIS       ⍝ Find node where tool invokes user code
        i treesUnder ⍵                  ⍝ Isolate user code
    }

    ⍝
    ⍝ Finds index of function (⍺)'s first occurence in call tree matrix (⍵).
    ⍝
    find←{
        1⍳⍨⍵[;2]≡¨⊂⍺
    }

    ⍝
    ⍝ Isolates subtree at specified index (⍺) of given call tree matrix (⍵).
    ⍝
    subtree←{
        d←⍵[⍺;1]                        ⍝ (D)epth of subtree in situ
        e←¯1+⍺+1⍳⍨⍺↓⍵[;1]≤d             ⍝ (E)nd of subtree index, i.e. first node not deeper than root
        _adjDepth(⍺-1)↓e↑⍵              ⍝ Trim both sides, adjust depth to origin-0
    }

    ⍝
    ⍝ Returns all children of node at specified index (⍺) of given call tree
    ⍝ matrix (⍵).
    ⍝
    treesUnder←{
        t←⍺ subtree ⍵                   ⍝ Isolate subtree
        t≡⍥≢⍵ : ⍵                       ⍝ Stop if unaltered (performance tweak)
        _adjDepth t⌿⍨t[;1]>1            ⍝ Remove root level, fix children's depths
    }

    ⍝
    ⍝ Adjusts depth of given call tree to be origin-0.
    ⍝
    ⍝ Assumes in the input is a matrix representing a single tree, or multiple
    ⍝ trees whose roots are at equal depth.
    ⍝
    _adjDepth←{
        ⍉-∘(⊃⍵)@1⊢⍉⍵
    }

:EndNamespace
