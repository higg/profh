:Namespace Profile

    clear←{                             ⍝ Clears ⎕PROFILE's buffer (ignores argument)
        _←##.out 'Clearing previous ⎕PROFILE buffer contents'
        ⎕PROFILE 'clear'
    }


    ∇ r ← isClear                       ⍝ Determines if ⎕PROFILE's buffer is clear
        r←~×≢⊃2⌷⎕PROFILE 'state'
    ∇


    ⍝
    ⍝ Profiles execution of one or more expressions (strings), optionally
    ⍝ clearing ⎕PROFILE's data buffer first.
    ⍝
    ⍝ Left argument is a vector of booleans as follows:
    ⍝   [1] indicates if previous ⎕PROFILE data should be cleared
    ⍝   [2] indicates if profiling should use CPU timer, otherwise uses elapsed time
    ⍝
    ∇ r ← flags prof expr ;t
        clear⍣(isClear<×⊃flags)⊢⍬       ⍝ Clear buffer if requested and required
        t←⊃'elapsed' 'cpu'⌷⍨1+2⌷flags   ⍝ Determine profiling type
        ⎕PROFILE 'start' t              ⍝ Start profiling
        r←_eval↓↑expr                   ⍝ Evaluate expression(s), suppress results
        ⎕PROFILE 'stop'                 ⍝ Stop profiling
    ∇

    ⍝
    ⍝ Evaluates each of given list of expressions.
    ⍝
    ⍝ This function exists primarily to provide an obvious entry in the call
    ⍝ tree which can be isolated and pruned. DO NOT CHANGE ITS NAME! (Or succumb
    ⍝ to the temptation to redefine it tacitly!)
    ⍝
    _eval←{⍎¨⍵}


    ⍝
    ⍝ --- Tree-pruning helpers -------------------------------------------------
    ⍝
    ⍝ The functions in this section all work on call tree matrices as consistent
    ⍝ with the return of  ⎕PROFILE'tree' . Note that only the first two columns
    ⍝ are refererenced in these routines, so a matrix composed of any subset of
    ⍝ columns will still work, provided the first two are intact. 
    ⍝

    ⍝
    ⍝ Prunes given call tree to include only entries strictly invoked under the
    ⍝ _eval function of this tool.
    ⍝
    trimSelf←{
        i←⍵ find⍨'._eval',⍨⍕⎕THIS       ⍝ Find node where tool invokes user code
        i>≢⍵ : ⍵                        ⍝ Leave whole if not found
        i treesUnder ⍵                  ⍝ Isolate user code
    }

    ⍝
    ⍝ Finds index of function (⍺)'s first occurence in call tree matrix (⍵).
    ⍝
    find←{
        1⍳⍨⍵[;2]≡¨⊂⍺
    }

    ⍝
    ⍝ Isolates subtree at specified index (⍺) of given call tree matrix (⍵).
    ⍝
    subtree←{
        d←⍵[⍺;1]                        ⍝ (D)epth of subtree in situ
        e←¯1+⍺+1⍳⍨⍺↓⍵[;1]≤d             ⍝ (E)nd of subtree index, i.e. first node not deeper than root
        _adjDepth(⍺-1)↓e↑⍵              ⍝ Trim both sides, adjust depth to origin-0
    }

    ⍝
    ⍝ Returns all children of node at specified index (⍺) of given call tree
    ⍝ matrix (⍵).
    ⍝
    treesUnder←{
        t←⍺ subtree ⍵                   ⍝ Isolate subtree
        t≡⍥≢⍵ : ⍵                       ⍝ Stop if unaltered (performance tweak)
        _adjDepth t⌿⍨t[;1]>1            ⍝ Remove root level, fix children's depths
    }

    ⍝
    ⍝ Adjusts depth of given call tree to be origin-0.
    ⍝
    ⍝ Assumes in the input is a matrix representing a single tree, or multiple
    ⍝ trees whose roots are at equal depth.
    ⍝
    _adjDepth←{
        ⍉-∘(⊃⍵)@1⊢⍉⍵
    }

    ⍝
    ⍝ Removes whole-function header entries from given call tree matrix (⍵).
    ⍝
    ⍝ The returned call tree matrix contains just line-level data, with depths
    ⍝ suitable adjusted.
    ⍝
    removeHeaders←{
        ⍝
        ⍝ In some circumstances ⎕PROFILE will provide whole-function entries
        ⍝ that aren't followed by line-level entries. In this author's
        ⍝ experience, this behaviour occurs in multi-threaded scenarios where
        ⍝ accrued time costs are implausible; thus undermining the value of the
        ⍝ collected data. But others have had more promising experiences, so we
        ⍝ will retain these entries and include them in the export.
        ⍝
        ⍝ An observed example of this phenomenon is shown below:
        ⍝
        ⍝   59  #.Conga.LIB.Send   4  377   7.371103391051292   35.96187336370349    1131  3770
        ⍝   60  #.Conga.⍙CallRL       377  26.184714399278164   26.184714399278164    377   377
        ⍝   60  #.Conga.LIB.check     377   2.406055573374033    2.406055573374033   2262  2262
        ⍝   61  #.Conga.LIB.check  0  377   0.3276783972978592   0.3276783972978592   377   377
        ⍝
        ct←⍵                            ⍝ Copy (c)all (t)ree for modification
        h←~2|ct[;1]                     ⍝ Create mask of function (h)eader entries
        ct[⍸h;1]+←1                     ⍝ Increase header entry depth for consistency with peers (relevant to retained headers)
        h∧←1,⍨2≡/ct[;2]                 ⍝ Exclude anomalous singleton header entries from purging
        ct⌿⍨←~h                         ⍝ Purge normal headers
        ct[;1](÷∘2⍤-)←1                 ⍝ Adjust depths to start at zero and increment by 1
        ct                              ⍝ Return modified call tree
    }

:EndNamespace
